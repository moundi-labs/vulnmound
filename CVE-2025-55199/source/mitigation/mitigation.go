// CVE-2025-55199
package main

import (
	"fmt"
	"os"
	"strings"

	"github.com/santhosh-tekuri/jsonschema/v6"
)

func MitigationValidateAgainstSingleSchema(schemaJson []byte) (err error) {
	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("unable to validate schema: %s", r)
		}
	}()

	data := `{"secret": "value"}`

	fmt.Printf("Processing schema: %s\n", string(schemaJson))

	// * Use jsonschema/v6 library
	compiler := jsonschema.NewCompiler()

	if err := compiler.AddResource("schema.json", strings.NewReader(string(schemaJson))); err != nil {
		fmt.Printf("SECURITY_BLOCKED: %v\n", err)
		return fmt.Errorf("security_blocked: %v", err)
	}

	schema, err := compiler.Compile("schema.json")
	if err != nil {
		fmt.Printf("SECURITY_BLOCKED: %v\n", err)
		return fmt.Errorf("security_blocked: %v", err)
	}

	if err := schema.Validate(strings.NewReader(data)); err != nil {
		fmt.Printf("VALIDATION_FAILED: %v\n", err)
		return fmt.Errorf("validation_failed: %v", err)
	}

	fmt.Println("VALIDATION_SUCCESS: Schema validated successfully")
	return nil
}

func main() {
	fmt.Println("CVE-2025-55199 Mitigation: Secure JSON Schema Validator")

	var schemaInput []byte

	if len(os.Args) > 1 {
		schemaInput = []byte(os.Args[1])
		fmt.Printf("Using schema from command line argument\n")
	} else {
		schemaInput = []byte(`{
			"type": "object",
			"properties": {
				"name": {"type": "string"},
				"age": {"type": "number"}
			}
		}`)
		fmt.Printf("Using default safe schema for testing\n")
	}

	fmt.Printf("Starting validation with schema size: %d bytes\n", len(schemaInput))

	err := MitigationValidateAgainstSingleSchema(schemaInput)
	if err != nil {
		errStr := err.Error()
		if strings.Contains(errStr, "security_blocked") {
			fmt.Printf("SECURITY_BLOCKED: Library blocked malicious schema\n")
			os.Exit(0)
		} else if strings.Contains(errStr, "validation_failed") {
			fmt.Printf("VALIDATION_FAILED: Schema validation failed\n")
			os.Exit(0)
		} else {
			fmt.Printf("UNEXPECTED_ERROR: %v\n", err)
			os.Exit(1)
		}
	}

	fmt.Println("VALIDATION_SUCCESS: Schema validation completed successfully")
}
