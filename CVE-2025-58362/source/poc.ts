import { vulnerableGetPath } from './vulnerable';
import { safeGetPath } from './mitigation';

// Test function
function testPathExtraction(url: string, expectedPath: string, description: string, useVulnerable: boolean) {
  const mockRequest = { url: url } as Request;
  const actualPath = useVulnerable ? vulnerableGetPath(mockRequest) : safeGetPath(mockRequest);
  
  console.log(`\n=== ${description} ===`);
  console.log(`URL: ${url}`);
  console.log(`Expected: ${expectedPath}`);
  console.log(`Actual:   ${actualPath}`);
  console.log(`Result:   ${actualPath === expectedPath ? 'PASS' : 'FAIL'}`);
  
  return actualPath === expectedPath;
}

// Test cases
const testCases = [
  ['https://example.com/admin', '/admin', 'Normal HTTPS URL'],
  ['http://example.com/admin', '/admin', 'Normal HTTP URL'],
  ['https://example.com:8080@evil.com/admin', '/admin', 'Vulnerable URL - port and @ symbol'],
  ['https://user:pass@example.com/admin', '/admin', 'Vulnerable URL - authentication info'],
  ['https://example.com:8080@evil.com:9999/admin', '/admin', 'Vulnerable URL - complex structure'],
  ['https://admin:password@example.com:8080@evil.com/secret', '/secret', 'Vulnerable URL - duplicate @ symbols'],
  ['http+unix:///var/run/docker.sock/admin', '/admin', 'HTTP+Unix URL'],
  ['https://example.com/admin?param=value', '/admin', 'URL with query parameters'],
  ['https://example.com/admin%2Fpath', '/admin/path', 'URL with percent encoding']
];

// Test execution based on arguments
const mode = process.argv[2];

if (mode === 'vulnerable') {
  console.log('Vulnerable Version Test (vulnerableGetPath)');
  console.log('==========================================');
  
  let passCount = 0;
  let totalTests = 0;
  
  testCases.forEach(([url, expected, description]) => {
    totalTests++;
    if (testPathExtraction(url, expected, description, true)) passCount++;
  });
  
  console.log('\n=====================================');
  console.log(`Vulnerable Version Test Results: ${passCount}/${totalTests} passed`);
  console.log(`Success Rate: ${((passCount / totalTests) * 100).toFixed(1)}%`);
  
  if (passCount < totalTests) {
    console.log('\nVULNERABILITY DETECTED! Some URLs were parsed incorrectly.');
    console.log('This is due to CVE-2025-58362 vulnerability.');
  }
  
} else if (mode === 'safe') {
  console.log('Safe Version Test (safeGetPath)');
  console.log('=====================================');
  
  let passCount = 0;
  let totalTests = 0;
  
  testCases.forEach(([url, expected, description]) => {
    totalTests++;
    if (testPathExtraction(url, expected, description, false)) passCount++;
  });
  
  console.log('\n=====================================');
  console.log(`Safe Version Test Results: ${passCount}/${totalTests} passed`);
  console.log(`Success Rate: ${((passCount / totalTests) * 100).toFixed(1)}%`);
  
  if (passCount === totalTests) {
    console.log('\nAll tests passed! Vulnerability has been fixed.');
  } else {
    console.log('\nSome tests failed. Additional fixes may be needed.');
  }
  
} else if (mode === 'compare') {
  console.log('Security Policy Simulation Comparison');
  console.log('=====================================');
  
  function simulateSecurityPolicy(path: string): boolean {
    return !path.startsWith('/admin');
  }
  
  const testUrls = [
    'https://example.com/admin',
    'https://example.com:8080@evil.com/admin',
    'https://user:pass@example.com/admin',
    'https://example.com/public',
    'https://admin:password@example.com:8080@evil.com/secret',
  ];
  
  console.log('Vulnerable Version vs Safe Version Comparison:');
  console.log('');
  
  testUrls.forEach(url => {
    const mockRequest = { url: url } as Request;
    const vulnerablePath = vulnerableGetPath(mockRequest);
    const safePath = safeGetPath(mockRequest);
    const vulnerableBlocked = simulateSecurityPolicy(vulnerablePath);
    const safeBlocked = simulateSecurityPolicy(safePath);
    
    console.log(`URL: ${url}`);
    console.log(`Vulnerable Version: ${vulnerablePath} → ${vulnerableBlocked ? 'BLOCKED' : 'ALLOWED'}`);
    console.log(`Safe Version: ${safePath} → ${safeBlocked ? 'BLOCKED' : 'ALLOWED'}`);
    console.log(`Result: ${vulnerableBlocked === safeBlocked ? 'SAME' : 'DIFFERENT!'}`);
    console.log('---');
  });
  
} else {
  console.log('Usage: npx tsx poc.ts [mode]');
  console.log('  - vulnerable: Test vulnerable version');
  console.log('  - safe: Test safe version');
  console.log('  - compare: Compare both versions');
}
